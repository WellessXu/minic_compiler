%type <node> MulExp
%type <node> RealParamList
%type <type> BasicType
%type <op_class> AddOp MulOp
%%

// 编译单元可包含若干个函数与全局变量定义。要在语义分析时检查main函数存在
// compileUnit: (funcDef | varDecl)* EOF;
// bison不支持闭包运算，为便于追加修改成左递归方式
// compileUnit: funcDef | varDecl | compileUnit funcDef | compileUnit varDecl
CompileUnit : /* 空规则 */ {
		// 创建一个空的编译单元节点
		$$ = create_contain_node(ast_operator_type::AST_OP_COMPILE_UNIT);
		ast_root = $$;
	}
	| FuncDef {
		// 创建一个编译单元的节点AST_OP_COMPILE_UNIT
		$$ = create_contain_node(ast_operator_type::AST_OP_COMPILE_UNIT, $1);
		ast_root = $$;
	}
	| VarDecl {
		// 创建一个编译单元的节点AST_OP_COMPILE_UNIT
		// 在编译单元（全局作用域）中的变量声明标记为全局变量
		// 通过设置needScope = false表示这些变量不需要特殊的作用域管理
		if ($1 != nullptr) {
			for (auto child : $1->sons) {
				if (child != nullptr && child->node_type == ast_operator_type::AST_OP_VAR_DECL) {
					child->needScope = false;  // 标记为全局变量
				}
			}
		}
--
AddExp : MulExp {
		// 乘除模表达式
		// 直接传递到归约后的节点
		$$ = $1;
	}
	| MulExp AddOp MulExp {
		// 两个乘除模表达式的加减运算
		// 创建加减运算节点，其孩子为两个乘除模表达式节点
		$$ = create_contain_node(ast_operator_type($2), $1, $3);
	}
	| AddExp AddOp MulExp {
		// 左递归形式可通过加减连接多个乘除模表达式
		// 创建加减运算节点，孩子为AddExp($1)和MulExp($3)
		$$ = create_contain_node(ast_operator_type($2), $1, $3);
	}
	;

// 加减运算符
AddOp: T_ADD {
		$$ = (int)ast_operator_type::AST_OP_ADD;
	}
	| T_SUB {
		$$ = (int)ast_operator_type::AST_OP_SUB;
	}
	;

// 乘除模表达式文法：mulExp: unaryExp (mulOp unaryExp)*
// 由于bison不支持用闭包表达，因此需要拆分成左递归的形式
// 改造后的左递归文法：
// mulExp : unaryExp | unaryExp mulOp unaryExp | mulExp mulOp unaryExp
MulExp : UnaryExp {
		// 一元表达式
		// 直接传递到归约后的节点
		$$ = $1;
	}
	| UnaryExp MulOp UnaryExp {
		// 两个一元表达式的乘除模运算
		// 创建乘除模运算节点，其孩子为两个一元表达式节点
		$$ = create_contain_node(ast_operator_type($2), $1, $3);
	}
	| MulExp MulOp UnaryExp {
		// 左递归形式可通过乘除模连接多个一元表达式
		// 创建乘除模运算节点，孩子为MulExp($1)和UnaryExp($3)
		$$ = create_contain_node(ast_operator_type($2), $1, $3);
	}
	;

// 乘除模运算符
MulOp: T_MUL {
		$$ = (int)ast_operator_type::AST_OP_MUL;
	}
	| T_DIV {
		$$ = (int)ast_operator_type::AST_OP_DIV;
	}
	| T_MOD {
		$$ = (int)ast_operator_type::AST_OP_MOD;
	}
	;

// 目前一元表达式可以为基本表达式、函数调用，其中函数调用的实参可有可无
// 其文法为：unaryExp: primaryExp | T_ID T_L_PAREN realParamList? T_R_PAREN
// 由于bison不支持？表达，因此变更后的文法为：
// unaryExp: primaryExp | T_SUB unaryExp | T_ID T_L_PAREN T_R_PAREN | T_ID T_L_PAREN realParamList T_R_PAREN
UnaryExp : PrimaryExp {
		// 基本表达式

		// 传递到归约后的UnaryExp上
		$$ = $1;
	}
	| T_SUB UnaryExp {
		// 求负运算
		
		// 创建求负运算节点
