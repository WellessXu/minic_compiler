@array = global [110 x i32] zeroinitializer, align 16
@n = global i32 0, align 4
define void @init(i32 %t0) {
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	store i32 1, i32* %l2, align 4
	br label %.L0
.L0:
	%t11 = load i32, i32* %l1, align 4
	%t12 = load i32, i32* %l1, align 4
	%t3 = mul nsw i32 %t11, %t12
	%t4 = add nsw i32 %t3, 1
	%t13 = load i32, i32* %l2, align 4
	%t5 = icmp sle i32 %t13, %t4
	br i1 %t5, label %.L1, label %.L14
.L1:
	%t6 = sub nsw i32 0, 1
	%t14 = load i32, i32* %l2, align 4
	%t7 = mul nsw i32 %t14, 1
	%t8 = mul nsw i32 %t7, 4
	%t15 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t16 = bitcast i32* %t15 to i8*
	%t18 = sext i32 %t8 to i64
	%t17 = getelementptr inbounds i8, i8* %t16, i64 %t18
	%t9 = bitcast i8* %t17 to i32*
	store i32 %t6, i32* %t9, align 4
	%t19 = load i32, i32* %l2, align 4
	%t10 = add nsw i32 %t19, 1
	store i32 %t10, i32* %l2, align 4
	br label %.L0
.L14:
	ret void
}
define i32 @findfa(i32 %t0) {
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	%t20 = load i32, i32* %l1, align 4
	%t6 = mul nsw i32 %t20, 1
	%t7 = mul nsw i32 %t6, 4
	%t21 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t22 = bitcast i32* %t21 to i8*
	%t24 = sext i32 %t7 to i64
	%t23 = getelementptr inbounds i8, i8* %t22, i64 %t24
	%t8 = bitcast i8* %t23 to i32*
	%t25 = load i32, i32* %t8, align 4
	store i32 %t25, i32* %l3, align 4
	%t26 = load i32, i32* %l3, align 4
	%t27 = load i32, i32* %l1, align 4
	%t9 = icmp eq i32 %t26, %t27
	br i1 %t9, label %.L0, label %.L1
.L0:
	%t28 = load i32, i32* %l1, align 4
	store i32 %t28, i32* %l2, align 4
	br label %.L23
.L1:
	%t29 = load i32, i32* %l1, align 4
	%t10 = mul nsw i32 %t29, 1
	%t11 = mul nsw i32 %t10, 4
	%t30 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t31 = bitcast i32* %t30 to i8*
	%t33 = sext i32 %t11 to i64
	%t32 = getelementptr inbounds i8, i8* %t31, i64 %t33
	%t12 = bitcast i8* %t32 to i32*
	%t34 = load i32, i32* %t12, align 4
	store i32 %t34, i32* %l4, align 4
	%t35 = load i32, i32* %l4, align 4
	%t13 = call i32 @findfa(i32 %t35)
	%t36 = load i32, i32* %l1, align 4
	%t14 = mul nsw i32 %t36, 1
	%t15 = mul nsw i32 %t14, 4
	%t37 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t38 = bitcast i32* %t37 to i8*
	%t40 = sext i32 %t15 to i64
	%t39 = getelementptr inbounds i8, i8* %t38, i64 %t40
	%t16 = bitcast i8* %t39 to i32*
	store i32 %t13, i32* %t16, align 4
	%t41 = load i32, i32* %l1, align 4
	%t17 = mul nsw i32 %t41, 1
	%t18 = mul nsw i32 %t17, 4
	%t42 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t43 = bitcast i32* %t42 to i8*
	%t45 = sext i32 %t18 to i64
	%t44 = getelementptr inbounds i8, i8* %t43, i64 %t45
	%t19 = bitcast i8* %t44 to i32*
	%t46 = load i32, i32* %t19, align 4
	store i32 %t46, i32* %l5, align 4
	%t47 = load i32, i32* %l5, align 4
	store i32 %t47, i32* %l2, align 4
	br label %.L23
.L23:
	%t48 = load i32, i32* %l2, align 4
	ret i32 %t48
}
define void @mmerge(i32 %t0, i32 %t1) {
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l2, align 4
	store i32 %t1, i32* %l3, align 4
	%t12 = load i32, i32* %l2, align 4
	%t6 = call i32 @findfa(i32 %t12)
	store i32 %t6, i32* %l4, align 4
	%t13 = load i32, i32* %l3, align 4
	%t7 = call i32 @findfa(i32 %t13)
	store i32 %t7, i32* %l5, align 4
	%t14 = load i32, i32* %l4, align 4
	%t15 = load i32, i32* %l5, align 4
	%t8 = icmp ne i32 %t14, %t15
	br i1 %t8, label %.L0, label %.L14
.L0:
	%t16 = load i32, i32* %l4, align 4
	%t9 = mul nsw i32 %t16, 1
	%t10 = mul nsw i32 %t9, 4
	%t17 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t18 = bitcast i32* %t17 to i8*
	%t20 = sext i32 %t10 to i64
	%t19 = getelementptr inbounds i8, i8* %t18, i64 %t20
	%t11 = bitcast i8* %t19 to i32*
	%t21 = load i32, i32* %l5, align 4
	store i32 %t21, i32* %t11, align 4
	br label %.L14
.L14:
	ret void
}
define i32 @main() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l10 = alloca i32, align 4
	%l11 = alloca i32, align 4
	%l12 = alloca i32, align 4
	%l13 = alloca i32, align 4
	%l14 = alloca i32, align 4
	%l15 = alloca i32, align 4
	%l16 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%l6 = alloca i32, align 4
	%l7 = alloca i32, align 4
	%l8 = alloca i32, align 4
	%l9 = alloca i32, align 4
	store i32 1, i32* %l1, align 4
	br label %.L0
.L0:
	%t98 = load i32, i32* %l1, align 4
	%t17 = icmp ne i32 %t98, 0
	br i1 %t17, label %.L1, label %.L2
.L1:
	%t99 = load i32, i32* %l1, align 4
	%t18 = sub nsw i32 %t99, 1
	store i32 %t18, i32* %l1, align 4
	store i32 4, i32* @n, align 4
	store i32 10, i32* %l2, align 4
	store i32 0, i32* %l5, align 4
	store i32 0, i32* %l6, align 4
	%t100 = load i32, i32* @n, align 4
	call void @init(i32 %t100)
	%t101 = load i32, i32* @n, align 4
	%t102 = load i32, i32* @n, align 4
	%t19 = mul nsw i32 %t101, %t102
	%t20 = add nsw i32 %t19, 1
	store i32 %t20, i32* %l7, align 4
	br label %.L3
.L3:
	%t103 = load i32, i32* %l5, align 4
	%t104 = load i32, i32* %l2, align 4
	%t21 = icmp slt i32 %t103, %t104
	br i1 %t21, label %.L4, label %.L36
.L4:
	%t22 = call i32 (...) @getint()
	store i32 %t22, i32* %l3, align 4
	%t23 = call i32 (...) @getint()
	store i32 %t23, i32* %l4, align 4
	%t105 = load i32, i32* %l3, align 4
	%t24 = sub nsw i32 %t105, 1
	%t106 = load i32, i32* @n, align 4
	%t25 = mul nsw i32 %t106, %t24
	%t107 = load i32, i32* %l4, align 4
	%t26 = add nsw i32 %t25, %t107
	store i32 %t26, i32* %l8, align 4
	%t108 = load i32, i32* %l8, align 4
	%t27 = mul nsw i32 %t108, 1
	%t28 = mul nsw i32 %t27, 4
	%t109 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t110 = bitcast i32* %t109 to i8*
	%t112 = sext i32 %t28 to i64
	%t111 = getelementptr inbounds i8, i8* %t110, i64 %t112
	%t29 = bitcast i8* %t111 to i32*
	%t113 = load i32, i32* %l8, align 4
	store i32 %t113, i32* %t29, align 4
	%t114 = load i32, i32* %l3, align 4
	%t30 = icmp eq i32 %t114, 1
	br i1 %t30, label %.L8, label %.L9
.L8:
	%t31 = mul nsw i32 0, 1
	%t32 = mul nsw i32 %t31, 4
	%t115 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t116 = bitcast i32* %t115 to i8*
	%t118 = sext i32 %t32 to i64
	%t117 = getelementptr inbounds i8, i8* %t116, i64 %t118
	%t33 = bitcast i8* %t117 to i32*
	store i32 0, i32* %t33, align 4
	%t119 = load i32, i32* %l8, align 4
	call void @mmerge(i32 %t119, i32 0)
	br label %.L9
.L9:
	%t120 = load i32, i32* %l3, align 4
	%t121 = load i32, i32* @n, align 4
	%t34 = icmp eq i32 %t120, %t121
	br i1 %t34, label %.L10, label %.L11
.L10:
	%t122 = load i32, i32* %l7, align 4
	%t35 = mul nsw i32 %t122, 1
	%t36 = mul nsw i32 %t35, 4
	%t123 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t124 = bitcast i32* %t123 to i8*
	%t126 = sext i32 %t36 to i64
	%t125 = getelementptr inbounds i8, i8* %t124, i64 %t126
	%t37 = bitcast i8* %t125 to i32*
	%t127 = load i32, i32* %l7, align 4
	store i32 %t127, i32* %t37, align 4
	%t128 = load i32, i32* %l8, align 4
	%t129 = load i32, i32* %l7, align 4
	call void @mmerge(i32 %t128, i32 %t129)
	br label %.L11
.L11:
	%t130 = load i32, i32* %l4, align 4
	%t131 = load i32, i32* @n, align 4
	%t38 = icmp slt i32 %t130, %t131
	%t39 = icmp ne i1 %t38, 0
	br i1 %t39, label %.L14, label %.L13
.L14:
	%t132 = load i32, i32* %l8, align 4
	%t40 = add nsw i32 %t132, 1
	%t41 = mul nsw i32 %t40, 1
	%t42 = mul nsw i32 %t41, 4
	%t133 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t134 = bitcast i32* %t133 to i8*
	%t136 = sext i32 %t42 to i64
	%t135 = getelementptr inbounds i8, i8* %t134, i64 %t136
	%t43 = bitcast i8* %t135 to i32*
	%t137 = load i32, i32* %t43, align 4
	store i32 %t137, i32* %l9, align 4
	%t44 = sub nsw i32 0, 1
	%t138 = load i32, i32* %l9, align 4
	%t45 = icmp ne i32 %t138, %t44
	%t46 = icmp ne i1 %t45, 0
	br i1 %t46, label %.L12, label %.L13
.L12:
	%t139 = load i32, i32* %l8, align 4
	%t47 = add nsw i32 %t139, 1
	%t140 = load i32, i32* %l8, align 4
	call void @mmerge(i32 %t140, i32 %t47)
	br label %.L13
.L13:
	%t141 = load i32, i32* %l4, align 4
	%t48 = icmp sgt i32 %t141, 1
	%t49 = icmp ne i1 %t48, 0
	br i1 %t49, label %.L18, label %.L17
.L18:
	%t142 = load i32, i32* %l8, align 4
	%t50 = sub nsw i32 %t142, 1
	%t51 = mul nsw i32 %t50, 1
	%t52 = mul nsw i32 %t51, 4
	%t143 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t144 = bitcast i32* %t143 to i8*
	%t146 = sext i32 %t52 to i64
	%t145 = getelementptr inbounds i8, i8* %t144, i64 %t146
	%t53 = bitcast i8* %t145 to i32*
	%t147 = load i32, i32* %t53, align 4
	store i32 %t147, i32* %l10, align 4
	%t54 = sub nsw i32 0, 1
	%t148 = load i32, i32* %l10, align 4
	%t55 = icmp ne i32 %t148, %t54
	%t56 = icmp ne i1 %t55, 0
	br i1 %t56, label %.L16, label %.L17
.L16:
	%t149 = load i32, i32* %l8, align 4
	%t57 = sub nsw i32 %t149, 1
	%t150 = load i32, i32* %l8, align 4
	call void @mmerge(i32 %t150, i32 %t57)
	br label %.L17
.L17:
	%t151 = load i32, i32* %l3, align 4
	%t152 = load i32, i32* @n, align 4
	%t58 = icmp slt i32 %t151, %t152
	%t59 = icmp ne i1 %t58, 0
	br i1 %t59, label %.L22, label %.L21
.L22:
	%t153 = load i32, i32* %l8, align 4
	%t154 = load i32, i32* @n, align 4
	%t60 = add nsw i32 %t153, %t154
	%t61 = mul nsw i32 %t60, 1
	%t62 = mul nsw i32 %t61, 4
	%t155 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t156 = bitcast i32* %t155 to i8*
	%t158 = sext i32 %t62 to i64
	%t157 = getelementptr inbounds i8, i8* %t156, i64 %t158
	%t63 = bitcast i8* %t157 to i32*
	%t159 = load i32, i32* %t63, align 4
	store i32 %t159, i32* %l11, align 4
	%t64 = sub nsw i32 0, 1
	%t160 = load i32, i32* %l11, align 4
	%t65 = icmp ne i32 %t160, %t64
	%t66 = icmp ne i1 %t65, 0
	br i1 %t66, label %.L20, label %.L21
.L20:
	%t161 = load i32, i32* %l8, align 4
	%t162 = load i32, i32* @n, align 4
	%t67 = add nsw i32 %t161, %t162
	%t163 = load i32, i32* %l8, align 4
	call void @mmerge(i32 %t163, i32 %t67)
	br label %.L21
.L21:
	%t164 = load i32, i32* %l3, align 4
	%t68 = icmp sgt i32 %t164, 1
	%t69 = icmp ne i1 %t68, 0
	br i1 %t69, label %.L26, label %.L25
.L26:
	%t165 = load i32, i32* %l8, align 4
	%t166 = load i32, i32* @n, align 4
	%t70 = sub nsw i32 %t165, %t166
	%t71 = mul nsw i32 %t70, 1
	%t72 = mul nsw i32 %t71, 4
	%t167 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t168 = bitcast i32* %t167 to i8*
	%t170 = sext i32 %t72 to i64
	%t169 = getelementptr inbounds i8, i8* %t168, i64 %t170
	%t73 = bitcast i8* %t169 to i32*
	%t171 = load i32, i32* %t73, align 4
	store i32 %t171, i32* %l12, align 4
	%t74 = sub nsw i32 0, 1
	%t172 = load i32, i32* %l12, align 4
	%t75 = icmp ne i32 %t172, %t74
	%t76 = icmp ne i1 %t75, 0
	br i1 %t76, label %.L24, label %.L25
.L24:
	%t173 = load i32, i32* %l8, align 4
	%t174 = load i32, i32* @n, align 4
	%t77 = sub nsw i32 %t173, %t174
	%t175 = load i32, i32* %l8, align 4
	call void @mmerge(i32 %t175, i32 %t77)
	br label %.L25
.L25:
	%t78 = mul nsw i32 0, 1
	%t79 = mul nsw i32 %t78, 4
	%t176 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t177 = bitcast i32* %t176 to i8*
	%t179 = sext i32 %t79 to i64
	%t178 = getelementptr inbounds i8, i8* %t177, i64 %t179
	%t80 = bitcast i8* %t178 to i32*
	%t180 = load i32, i32* %t80, align 4
	store i32 %t180, i32* %l13, align 4
	%t81 = sub nsw i32 0, 1
	%t181 = load i32, i32* %l13, align 4
	%t82 = icmp ne i32 %t181, %t81
	%t83 = icmp ne i1 %t82, 0
	br i1 %t83, label %.L32, label %.L35
.L32:
	%t182 = load i32, i32* %l7, align 4
	%t84 = mul nsw i32 %t182, 1
	%t85 = mul nsw i32 %t84, 4
	%t183 = getelementptr inbounds [110 x i32], [110 x i32]* @array, i64 0, i64 0
	%t184 = bitcast i32* %t183 to i8*
	%t186 = sext i32 %t85 to i64
	%t185 = getelementptr inbounds i8, i8* %t184, i64 %t186
	%t86 = bitcast i8* %t185 to i32*
	%t187 = load i32, i32* %t86, align 4
	store i32 %t187, i32* %l14, align 4
	%t87 = sub nsw i32 0, 1
	%t188 = load i32, i32* %l14, align 4
	%t88 = icmp ne i32 %t188, %t87
	%t89 = icmp ne i1 %t88, 0
	br i1 %t89, label %.L34, label %.L35
.L34:
	store i32 1, i32* %l15, align 4
	br label %.L33
.L35:
	store i32 0, i32* %l15, align 4
	br label %.L33
.L33:
	%t189 = load i32, i32* %l15, align 4
	%t90 = icmp ne i32 %t189, 0
	br i1 %t90, label %.L30, label %.L7
.L30:
	%t91 = call i32 @findfa(i32 0)
	%t190 = load i32, i32* %l7, align 4
	%t92 = call i32 @findfa(i32 %t190)
	%t93 = icmp eq i32 %t91, %t92
	%t94 = icmp ne i1 %t93, 0
	br i1 %t94, label %.L28, label %.L7
.L28:
	store i32 1, i32* %l6, align 4
	%t191 = load i32, i32* %l5, align 4
	%t95 = add nsw i32 %t191, 1
	store i32 %t95, i32* %l16, align 4
	%t192 = load i32, i32* %l16, align 4
	call void @putint(i32 %t192)
	call void @putch(i32 10)
	br label %.L7
.L7:
	%t193 = load i32, i32* %l5, align 4
	%t96 = add nsw i32 %t193, 1
	store i32 %t96, i32* %l5, align 4
	br label %.L3
.L36:
	%t97 = sub nsw i32 0, 1
	call void @putint(i32 %t97)
	call void @putch(i32 10)
	br label %.L0
.L2:
	store i32 0, i32* %l0, align 4
	%t194 = load i32, i32* %l0, align 4
	ret i32 %t194
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
declare float @getfloat(...);
declare void @putfloat(float);
declare i32 @getfarray(float*);
declare void @putfarray(i32, float*);
