@n = global i32 0, align 4
@m = global i32 0, align 4
@to = global [5005 x i32] zeroinitializer, align 16
@next = global [5005 x i32] zeroinitializer, align 16
@head = global [1005 x i32] zeroinitializer, align 16
@cnt = global i32 0, align 4
@vis = global [1005 x i32] zeroinitializer, align 16
define i32 @quick_read() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%t4 = call i32 (...) @getch()
	store i32 %t4, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	store i32 0, i32* %l3, align 4
	br label %.L0
.L0:
	%t17 = load i32, i32* %l1, align 4
	%t5 = icmp slt i32 %t17, 48
	br i1 %t5, label %.L1, label %.L3
.L3:
	%t18 = load i32, i32* %l1, align 4
	%t6 = icmp sgt i32 %t18, 57
	br i1 %t6, label %.L1, label %.L6
.L1:
	%t19 = load i32, i32* %l1, align 4
	%t7 = icmp eq i32 %t19, 45
	br i1 %t7, label %.L4, label %.L5
.L4:
	store i32 1, i32* %l3, align 4
	br label %.L5
.L5:
	%t8 = call i32 (...) @getch()
	store i32 %t8, i32* %l1, align 4
	br label %.L0
.L6:
	%t20 = load i32, i32* %l1, align 4
	%t9 = icmp sge i32 %t20, 48
	br i1 %t9, label %.L9, label %.L8
.L9:
	%t21 = load i32, i32* %l1, align 4
	%t10 = icmp sle i32 %t21, 57
	br i1 %t10, label %.L7, label %.L8
.L7:
	%t22 = load i32, i32* %l2, align 4
	%t11 = mul nsw i32 %t22, 10
	%t23 = load i32, i32* %l1, align 4
	%t12 = add nsw i32 %t11, %t23
	%t13 = sub nsw i32 %t12, 48
	store i32 %t13, i32* %l2, align 4
	%t14 = call i32 (...) @getch()
	store i32 %t14, i32* %l1, align 4
	br label %.L6
.L8:
	%t24 = load i32, i32* %l3, align 4
	%t15 = icmp ne i32 %t24, 0
	br i1 %t15, label %.L10, label %.L11
.L10:
	%t25 = load i32, i32* %l2, align 4
	%t16 = sub nsw i32 0, %t25
	store i32 %t16, i32* %l0, align 4
	br label %.L30
.L11:
	%t26 = load i32, i32* %l2, align 4
	store i32 %t26, i32* %l0, align 4
	br label %.L30
.L30:
	%t27 = load i32, i32* %l0, align 4
	ret i32 %t27
}
define void @add_edge(i32 %t0, i32 %t1) {
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l2, align 4
	store i32 %t1, i32* %l3, align 4
	%t32 = load i32, i32* @cnt, align 4
	%t6 = mul nsw i32 %t32, 1
	%t7 = mul nsw i32 %t6, 4
	%t33 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t34 = bitcast i32* %t33 to i8*
	%t36 = sext i32 %t7 to i64
	%t35 = getelementptr inbounds i8, i8* %t34, i64 %t36
	%t8 = bitcast i8* %t35 to i32*
	%t37 = load i32, i32* %l3, align 4
	store i32 %t37, i32* %t8, align 4
	%t38 = load i32, i32* %l2, align 4
	%t9 = mul nsw i32 %t38, 1
	%t10 = mul nsw i32 %t9, 4
	%t39 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t40 = bitcast i32* %t39 to i8*
	%t42 = sext i32 %t10 to i64
	%t41 = getelementptr inbounds i8, i8* %t40, i64 %t42
	%t11 = bitcast i8* %t41 to i32*
	%t43 = load i32, i32* %t11, align 4
	store i32 %t43, i32* %l4, align 4
	%t44 = load i32, i32* @cnt, align 4
	%t12 = mul nsw i32 %t44, 1
	%t13 = mul nsw i32 %t12, 4
	%t45 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t46 = bitcast i32* %t45 to i8*
	%t48 = sext i32 %t13 to i64
	%t47 = getelementptr inbounds i8, i8* %t46, i64 %t48
	%t14 = bitcast i8* %t47 to i32*
	%t49 = load i32, i32* %l4, align 4
	store i32 %t49, i32* %t14, align 4
	%t50 = load i32, i32* %l2, align 4
	%t15 = mul nsw i32 %t50, 1
	%t16 = mul nsw i32 %t15, 4
	%t51 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t52 = bitcast i32* %t51 to i8*
	%t54 = sext i32 %t16 to i64
	%t53 = getelementptr inbounds i8, i8* %t52, i64 %t54
	%t17 = bitcast i8* %t53 to i32*
	%t55 = load i32, i32* @cnt, align 4
	store i32 %t55, i32* %t17, align 4
	%t56 = load i32, i32* @cnt, align 4
	%t18 = add nsw i32 %t56, 1
	store i32 %t18, i32* @cnt, align 4
	%t57 = load i32, i32* @cnt, align 4
	%t19 = mul nsw i32 %t57, 1
	%t20 = mul nsw i32 %t19, 4
	%t58 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t59 = bitcast i32* %t58 to i8*
	%t61 = sext i32 %t20 to i64
	%t60 = getelementptr inbounds i8, i8* %t59, i64 %t61
	%t21 = bitcast i8* %t60 to i32*
	%t62 = load i32, i32* %l2, align 4
	store i32 %t62, i32* %t21, align 4
	%t63 = load i32, i32* %l3, align 4
	%t22 = mul nsw i32 %t63, 1
	%t23 = mul nsw i32 %t22, 4
	%t64 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t65 = bitcast i32* %t64 to i8*
	%t67 = sext i32 %t23 to i64
	%t66 = getelementptr inbounds i8, i8* %t65, i64 %t67
	%t24 = bitcast i8* %t66 to i32*
	%t68 = load i32, i32* %t24, align 4
	store i32 %t68, i32* %l5, align 4
	%t69 = load i32, i32* @cnt, align 4
	%t25 = mul nsw i32 %t69, 1
	%t26 = mul nsw i32 %t25, 4
	%t70 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t71 = bitcast i32* %t70 to i8*
	%t73 = sext i32 %t26 to i64
	%t72 = getelementptr inbounds i8, i8* %t71, i64 %t73
	%t27 = bitcast i8* %t72 to i32*
	%t74 = load i32, i32* %l5, align 4
	store i32 %t74, i32* %t27, align 4
	%t75 = load i32, i32* %l3, align 4
	%t28 = mul nsw i32 %t75, 1
	%t29 = mul nsw i32 %t28, 4
	%t76 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t77 = bitcast i32* %t76 to i8*
	%t79 = sext i32 %t29 to i64
	%t78 = getelementptr inbounds i8, i8* %t77, i64 %t79
	%t30 = bitcast i8* %t78 to i32*
	%t80 = load i32, i32* @cnt, align 4
	store i32 %t80, i32* %t30, align 4
	%t81 = load i32, i32* @cnt, align 4
	%t31 = add nsw i32 %t81, 1
	store i32 %t31, i32* @cnt, align 4
	ret void
}
define void @init() {
	%l0 = alloca i32, align 4
	store i32 0, i32* %l0, align 4
	br label %.L0
.L0:
	%t7 = load i32, i32* %l0, align 4
	%t1 = icmp slt i32 %t7, 1005
	br i1 %t1, label %.L1, label %.L10
.L1:
	%t2 = sub nsw i32 0, 1
	%t8 = load i32, i32* %l0, align 4
	%t3 = mul nsw i32 %t8, 1
	%t4 = mul nsw i32 %t3, 4
	%t9 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t10 = bitcast i32* %t9 to i8*
	%t12 = sext i32 %t4 to i64
	%t11 = getelementptr inbounds i8, i8* %t10, i64 %t12
	%t5 = bitcast i8* %t11 to i32*
	store i32 %t2, i32* %t5, align 4
	%t13 = load i32, i32* %l0, align 4
	%t6 = add nsw i32 %t13, 1
	store i32 %t6, i32* %l0, align 4
	br label %.L0
.L10:
	ret void
}
define void @clear() {
	%l0 = alloca i32, align 4
	store i32 1, i32* %l0, align 4
	br label %.L0
.L0:
	%t6 = load i32, i32* %l0, align 4
	%t7 = load i32, i32* @n, align 4
	%t1 = icmp sle i32 %t6, %t7
	br i1 %t1, label %.L1, label %.L9
.L1:
	%t8 = load i32, i32* %l0, align 4
	%t2 = mul nsw i32 %t8, 1
	%t3 = mul nsw i32 %t2, 4
	%t9 = getelementptr inbounds [1005 x i32], [1005 x i32]* @vis, i64 0, i64 0
	%t10 = bitcast i32* %t9 to i8*
	%t12 = sext i32 %t3 to i64
	%t11 = getelementptr inbounds i8, i8* %t10, i64 %t12
	%t4 = bitcast i8* %t11 to i32*
	store i32 0, i32* %t4, align 4
	%t13 = load i32, i32* %l0, align 4
	%t5 = add nsw i32 %t13, 1
	store i32 %t5, i32* %l0, align 4
	br label %.L0
.L9:
	ret void
}
define i32 @same(i32 %t0, i32 %t1) {
	%l10 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%l6 = alloca i32, align 4
	%l7 = alloca i32, align 4
	%l8 = alloca i32, align 4
	%l9 = alloca i32, align 4
	store i32 %t0, i32* %l2, align 4
	store i32 %t1, i32* %l3, align 4
	%t31 = load i32, i32* %l2, align 4
	%t11 = mul nsw i32 %t31, 1
	%t12 = mul nsw i32 %t11, 4
	%t32 = getelementptr inbounds [1005 x i32], [1005 x i32]* @vis, i64 0, i64 0
	%t33 = bitcast i32* %t32 to i8*
	%t35 = sext i32 %t12 to i64
	%t34 = getelementptr inbounds i8, i8* %t33, i64 %t35
	%t13 = bitcast i8* %t34 to i32*
	store i32 1, i32* %t13, align 4
	%t36 = load i32, i32* %l2, align 4
	%t37 = load i32, i32* %l3, align 4
	%t14 = icmp eq i32 %t36, %t37
	br i1 %t14, label %.L0, label %.L1
.L0:
	store i32 1, i32* %l4, align 4
	br label %.L39
.L1:
	%t38 = load i32, i32* %l2, align 4
	%t15 = mul nsw i32 %t38, 1
	%t16 = mul nsw i32 %t15, 4
	%t39 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t40 = bitcast i32* %t39 to i8*
	%t42 = sext i32 %t16 to i64
	%t41 = getelementptr inbounds i8, i8* %t40, i64 %t42
	%t17 = bitcast i8* %t41 to i32*
	%t43 = load i32, i32* %t17, align 4
	store i32 %t43, i32* %l5, align 4
	%t44 = load i32, i32* %l5, align 4
	store i32 %t44, i32* %l6, align 4
	br label %.L2
.L2:
	%t18 = sub nsw i32 0, 1
	%t45 = load i32, i32* %l6, align 4
	%t19 = icmp ne i32 %t45, %t18
	br i1 %t19, label %.L3, label %.L4
.L3:
	%t46 = load i32, i32* %l6, align 4
	%t20 = mul nsw i32 %t46, 1
	%t21 = mul nsw i32 %t20, 4
	%t47 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t48 = bitcast i32* %t47 to i8*
	%t50 = sext i32 %t21 to i64
	%t49 = getelementptr inbounds i8, i8* %t48, i64 %t50
	%t22 = bitcast i8* %t49 to i32*
	%t51 = load i32, i32* %t22, align 4
	store i32 %t51, i32* %l7, align 4
	%t52 = load i32, i32* %l7, align 4
	store i32 %t52, i32* %l8, align 4
	%t53 = load i32, i32* %l8, align 4
	%t23 = mul nsw i32 %t53, 1
	%t24 = mul nsw i32 %t23, 4
	%t54 = getelementptr inbounds [1005 x i32], [1005 x i32]* @vis, i64 0, i64 0
	%t55 = bitcast i32* %t54 to i8*
	%t57 = sext i32 %t24 to i64
	%t56 = getelementptr inbounds i8, i8* %t55, i64 %t57
	%t25 = bitcast i8* %t56 to i32*
	%t58 = load i32, i32* %t25, align 4
	store i32 %t58, i32* %l9, align 4
	%t59 = load i32, i32* %l8, align 4
	%t60 = load i32, i32* %l3, align 4
	%t26 = call i32 @same(i32 %t59, i32 %t60)
	%t27 = icmp ne i32 %t26, 0
	br i1 %t27, label %.L5, label %.L6
.L5:
	store i32 1, i32* %l4, align 4
	br label %.L39
.L6:
	%t61 = load i32, i32* %l6, align 4
	%t28 = mul nsw i32 %t61, 1
	%t29 = mul nsw i32 %t28, 4
	%t62 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t63 = bitcast i32* %t62 to i8*
	%t65 = sext i32 %t29 to i64
	%t64 = getelementptr inbounds i8, i8* %t63, i64 %t65
	%t30 = bitcast i8* %t64 to i32*
	%t66 = load i32, i32* %t30, align 4
	store i32 %t66, i32* %l10, align 4
	%t67 = load i32, i32* %l10, align 4
	store i32 %t67, i32* %l6, align 4
	br label %.L2
.L4:
	store i32 0, i32* %l4, align 4
	br label %.L39
.L39:
	%t68 = load i32, i32* %l4, align 4
	ret i32 %t68
}
define i32 @main() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%t6 = call i32 @quick_read()
	store i32 %t6, i32* @n, align 4
	%t7 = call i32 @quick_read()
	store i32 %t7, i32* @m, align 4
	call void @init()
	br label %.L0
.L0:
	%t20 = load i32, i32* @m, align 4
	%t8 = icmp ne i32 %t20, 0
	br i1 %t8, label %.L1, label %.L2
.L1:
	%t9 = call i32 (...) @getch()
	store i32 %t9, i32* %l1, align 4
	br label %.L3
.L3:
	%t21 = load i32, i32* %l1, align 4
	%t10 = icmp ne i32 %t21, 81
	br i1 %t10, label %.L6, label %.L5
.L6:
	%t22 = load i32, i32* %l1, align 4
	%t11 = icmp ne i32 %t22, 85
	br i1 %t11, label %.L4, label %.L5
.L4:
	%t12 = call i32 (...) @getch()
	store i32 %t12, i32* %l1, align 4
	br label %.L3
.L5:
	%t23 = load i32, i32* %l1, align 4
	%t13 = icmp eq i32 %t23, 81
	br i1 %t13, label %.L7, label %.L8
.L7:
	%t14 = call i32 @quick_read()
	store i32 %t14, i32* %l2, align 4
	%t15 = call i32 @quick_read()
	store i32 %t15, i32* %l3, align 4
	call void @clear()
	%t24 = load i32, i32* %l2, align 4
	%t25 = load i32, i32* %l3, align 4
	%t16 = call i32 @same(i32 %t24, i32 %t25)
	call void @putint(i32 %t16)
	call void @putch(i32 10)
	br label %.L9
.L8:
	%t17 = call i32 @quick_read()
	store i32 %t17, i32* %l4, align 4
	%t18 = call i32 @quick_read()
	store i32 %t18, i32* %l5, align 4
	%t26 = load i32, i32* %l4, align 4
	%t27 = load i32, i32* %l5, align 4
	call void @add_edge(i32 %t26, i32 %t27)
	br label %.L9
.L9:
	%t28 = load i32, i32* @m, align 4
	%t19 = sub nsw i32 %t28, 1
	store i32 %t19, i32* @m, align 4
	br label %.L0
.L2:
	store i32 0, i32* %l0, align 4
	%t29 = load i32, i32* %l0, align 4
	ret i32 %t29
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
declare float @getfloat(...);
declare void @putfloat(float);
declare i32 @getfarray(float*);
declare void @putfarray(i32, float*);
