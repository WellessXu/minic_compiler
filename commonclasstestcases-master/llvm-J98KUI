@n = global i32 0, align 4
@m = global i32 0, align 4
@to = global [5005 x i32] zeroinitializer, align 16
@next = global [5005 x i32] zeroinitializer, align 16
@head = global [1005 x i32] zeroinitializer, align 16
@cnt = global i32 0, align 4
@que = global [1005 x i32] zeroinitializer, align 16
@h = global i32 0, align 4
@tail = global i32 0, align 4
@inq = global [1005 x i32] zeroinitializer, align 16
define i32 @quick_read() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%t4 = call i32 (...) @getch()
	store i32 %t4, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	store i32 0, i32* %l3, align 4
	br label %.L0
.L0:
	%t21 = load i32, i32* %l1, align 4
	%t5 = icmp slt i32 %t21, 48
	%t6 = icmp ne i1 %t5, 0
	br i1 %t6, label %.L1, label %.L3
.L3:
	%t22 = load i32, i32* %l1, align 4
	%t7 = icmp sgt i32 %t22, 57
	%t8 = icmp ne i1 %t7, 0
	br i1 %t8, label %.L1, label %.L7
.L1:
	%t23 = load i32, i32* %l1, align 4
	%t9 = icmp eq i32 %t23, 45
	br i1 %t9, label %.L5, label %.L6
.L5:
	store i32 1, i32* %l3, align 4
	br label %.L6
.L6:
	%t10 = call i32 (...) @getch()
	store i32 %t10, i32* %l1, align 4
	br label %.L0
.L7:
	%t24 = load i32, i32* %l1, align 4
	%t11 = icmp sge i32 %t24, 48
	%t12 = icmp ne i1 %t11, 0
	br i1 %t12, label %.L10, label %.L9
.L10:
	%t25 = load i32, i32* %l1, align 4
	%t13 = icmp sle i32 %t25, 57
	%t14 = icmp ne i1 %t13, 0
	br i1 %t14, label %.L8, label %.L9
.L8:
	%t26 = load i32, i32* %l2, align 4
	%t15 = mul nsw i32 %t26, 10
	%t27 = load i32, i32* %l1, align 4
	%t16 = add nsw i32 %t15, %t27
	%t17 = sub nsw i32 %t16, 48
	store i32 %t17, i32* %l2, align 4
	%t18 = call i32 (...) @getch()
	store i32 %t18, i32* %l1, align 4
	br label %.L7
.L9:
	%t28 = load i32, i32* %l3, align 4
	%t19 = icmp ne i32 %t28, 0
	br i1 %t19, label %.L12, label %.L13
.L12:
	%t29 = load i32, i32* %l2, align 4
	%t20 = sub nsw i32 0, %t29
	store i32 %t20, i32* %l0, align 4
	br label %.L34
.L13:
	%t30 = load i32, i32* %l2, align 4
	store i32 %t30, i32* %l0, align 4
	br label %.L34
.L34:
	%t31 = load i32, i32* %l0, align 4
	ret i32 %t31
}
define void @add_edge(i32 %t0, i32 %t1) {
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l2, align 4
	store i32 %t1, i32* %l3, align 4
	%t32 = load i32, i32* @cnt, align 4
	%t6 = mul nsw i32 %t32, 1
	%t7 = mul nsw i32 %t6, 4
	%t33 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t34 = bitcast i32* %t33 to i8*
	%t36 = sext i32 %t7 to i64
	%t35 = getelementptr inbounds i8, i8* %t34, i64 %t36
	%t8 = bitcast i8* %t35 to i32*
	%t37 = load i32, i32* %l3, align 4
	store i32 %t37, i32* %t8, align 4
	%t38 = load i32, i32* %l2, align 4
	%t9 = mul nsw i32 %t38, 1
	%t10 = mul nsw i32 %t9, 4
	%t39 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t40 = bitcast i32* %t39 to i8*
	%t42 = sext i32 %t10 to i64
	%t41 = getelementptr inbounds i8, i8* %t40, i64 %t42
	%t11 = bitcast i8* %t41 to i32*
	%t43 = load i32, i32* %t11, align 4
	store i32 %t43, i32* %l4, align 4
	%t44 = load i32, i32* @cnt, align 4
	%t12 = mul nsw i32 %t44, 1
	%t13 = mul nsw i32 %t12, 4
	%t45 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t46 = bitcast i32* %t45 to i8*
	%t48 = sext i32 %t13 to i64
	%t47 = getelementptr inbounds i8, i8* %t46, i64 %t48
	%t14 = bitcast i8* %t47 to i32*
	%t49 = load i32, i32* %l4, align 4
	store i32 %t49, i32* %t14, align 4
	%t50 = load i32, i32* %l2, align 4
	%t15 = mul nsw i32 %t50, 1
	%t16 = mul nsw i32 %t15, 4
	%t51 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t52 = bitcast i32* %t51 to i8*
	%t54 = sext i32 %t16 to i64
	%t53 = getelementptr inbounds i8, i8* %t52, i64 %t54
	%t17 = bitcast i8* %t53 to i32*
	%t55 = load i32, i32* @cnt, align 4
	store i32 %t55, i32* %t17, align 4
	%t56 = load i32, i32* @cnt, align 4
	%t18 = add nsw i32 %t56, 1
	store i32 %t18, i32* @cnt, align 4
	%t57 = load i32, i32* @cnt, align 4
	%t19 = mul nsw i32 %t57, 1
	%t20 = mul nsw i32 %t19, 4
	%t58 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t59 = bitcast i32* %t58 to i8*
	%t61 = sext i32 %t20 to i64
	%t60 = getelementptr inbounds i8, i8* %t59, i64 %t61
	%t21 = bitcast i8* %t60 to i32*
	%t62 = load i32, i32* %l2, align 4
	store i32 %t62, i32* %t21, align 4
	%t63 = load i32, i32* %l3, align 4
	%t22 = mul nsw i32 %t63, 1
	%t23 = mul nsw i32 %t22, 4
	%t64 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t65 = bitcast i32* %t64 to i8*
	%t67 = sext i32 %t23 to i64
	%t66 = getelementptr inbounds i8, i8* %t65, i64 %t67
	%t24 = bitcast i8* %t66 to i32*
	%t68 = load i32, i32* %t24, align 4
	store i32 %t68, i32* %l5, align 4
	%t69 = load i32, i32* @cnt, align 4
	%t25 = mul nsw i32 %t69, 1
	%t26 = mul nsw i32 %t25, 4
	%t70 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t71 = bitcast i32* %t70 to i8*
	%t73 = sext i32 %t26 to i64
	%t72 = getelementptr inbounds i8, i8* %t71, i64 %t73
	%t27 = bitcast i8* %t72 to i32*
	%t74 = load i32, i32* %l5, align 4
	store i32 %t74, i32* %t27, align 4
	%t75 = load i32, i32* %l3, align 4
	%t28 = mul nsw i32 %t75, 1
	%t29 = mul nsw i32 %t28, 4
	%t76 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t77 = bitcast i32* %t76 to i8*
	%t79 = sext i32 %t29 to i64
	%t78 = getelementptr inbounds i8, i8* %t77, i64 %t79
	%t30 = bitcast i8* %t78 to i32*
	%t80 = load i32, i32* @cnt, align 4
	store i32 %t80, i32* %t30, align 4
	%t81 = load i32, i32* @cnt, align 4
	%t31 = add nsw i32 %t81, 1
	store i32 %t31, i32* @cnt, align 4
	ret void
}
define void @init() {
	%l0 = alloca i32, align 4
	store i32 0, i32* %l0, align 4
	br label %.L0
.L0:
	%t7 = load i32, i32* %l0, align 4
	%t1 = icmp slt i32 %t7, 1005
	br i1 %t1, label %.L1, label %.L10
.L1:
	%t2 = sub nsw i32 0, 1
	%t8 = load i32, i32* %l0, align 4
	%t3 = mul nsw i32 %t8, 1
	%t4 = mul nsw i32 %t3, 4
	%t9 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t10 = bitcast i32* %t9 to i8*
	%t12 = sext i32 %t4 to i64
	%t11 = getelementptr inbounds i8, i8* %t10, i64 %t12
	%t5 = bitcast i8* %t11 to i32*
	store i32 %t2, i32* %t5, align 4
	%t13 = load i32, i32* %l0, align 4
	%t6 = add nsw i32 %t13, 1
	store i32 %t6, i32* %l0, align 4
	br label %.L0
.L10:
	ret void
}
define void @inqueue(i32 %t0) {
	%l1 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	%t9 = load i32, i32* %l1, align 4
	%t2 = mul nsw i32 %t9, 1
	%t3 = mul nsw i32 %t2, 4
	%t10 = getelementptr inbounds [1005 x i32], [1005 x i32]* @inq, i64 0, i64 0
	%t11 = bitcast i32* %t10 to i8*
	%t13 = sext i32 %t3 to i64
	%t12 = getelementptr inbounds i8, i8* %t11, i64 %t13
	%t4 = bitcast i8* %t12 to i32*
	store i32 1, i32* %t4, align 4
	%t14 = load i32, i32* @tail, align 4
	%t5 = add nsw i32 %t14, 1
	store i32 %t5, i32* @tail, align 4
	%t15 = load i32, i32* @tail, align 4
	%t6 = mul nsw i32 %t15, 1
	%t7 = mul nsw i32 %t6, 4
	%t16 = getelementptr inbounds [1005 x i32], [1005 x i32]* @que, i64 0, i64 0
	%t17 = bitcast i32* %t16 to i8*
	%t19 = sext i32 %t7 to i64
	%t18 = getelementptr inbounds i8, i8* %t17, i64 %t19
	%t8 = bitcast i8* %t18 to i32*
	%t20 = load i32, i32* %l1, align 4
	store i32 %t20, i32* %t8, align 4
	ret void
}
define i32 @pop_queue() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%t11 = load i32, i32* @h, align 4
	%t4 = add nsw i32 %t11, 1
	store i32 %t4, i32* @h, align 4
	%t12 = load i32, i32* @h, align 4
	%t5 = mul nsw i32 %t12, 1
	%t6 = mul nsw i32 %t5, 4
	%t13 = getelementptr inbounds [1005 x i32], [1005 x i32]* @que, i64 0, i64 0
	%t14 = bitcast i32* %t13 to i8*
	%t16 = sext i32 %t6 to i64
	%t15 = getelementptr inbounds i8, i8* %t14, i64 %t16
	%t7 = bitcast i8* %t15 to i32*
	%t17 = load i32, i32* %t7, align 4
	store i32 %t17, i32* %l1, align 4
	%t18 = load i32, i32* %l1, align 4
	store i32 %t18, i32* %l2, align 4
	%t19 = load i32, i32* @h, align 4
	%t8 = mul nsw i32 %t19, 1
	%t9 = mul nsw i32 %t8, 4
	%t20 = getelementptr inbounds [1005 x i32], [1005 x i32]* @que, i64 0, i64 0
	%t21 = bitcast i32* %t20 to i8*
	%t23 = sext i32 %t9 to i64
	%t22 = getelementptr inbounds i8, i8* %t21, i64 %t23
	%t10 = bitcast i8* %t22 to i32*
	%t24 = load i32, i32* %t10, align 4
	store i32 %t24, i32* %l3, align 4
	%t25 = load i32, i32* %l3, align 4
	store i32 %t25, i32* %l0, align 4
	%t26 = load i32, i32* %l0, align 4
	ret i32 %t26
}
define i32 @same(i32 %t0, i32 %t1) {
	%l10 = alloca i32, align 4
	%l11 = alloca i32, align 4
	%l12 = alloca i32, align 4
	%l13 = alloca i32, align 4
	%l14 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%l6 = alloca i32, align 4
	%l7 = alloca i32, align 4
	%l8 = alloca i32, align 4
	%l9 = alloca i32, align 4
	store i32 %t0, i32* %l2, align 4
	store i32 %t1, i32* %l3, align 4
	store i32 0, i32* @h, align 4
	store i32 0, i32* @tail, align 4
	%t43 = load i32, i32* %l2, align 4
	call void @inqueue(i32 %t43)
	store i32 0, i32* %l5, align 4
	br label %.L0
.L0:
	%t44 = load i32, i32* @h, align 4
	%t45 = load i32, i32* @tail, align 4
	%t15 = icmp slt i32 %t44, %t45
	br i1 %t15, label %.L1, label %.L2
.L1:
	%t16 = call i32 @pop_queue()
	store i32 %t16, i32* %l6, align 4
	%t46 = load i32, i32* %l6, align 4
	%t47 = load i32, i32* %l3, align 4
	%t17 = icmp eq i32 %t46, %t47
	br i1 %t17, label %.L3, label %.L4
.L3:
	store i32 1, i32* %l5, align 4
	br label %.L4
.L4:
	%t48 = load i32, i32* %l6, align 4
	%t18 = mul nsw i32 %t48, 1
	%t19 = mul nsw i32 %t18, 4
	%t49 = getelementptr inbounds [1005 x i32], [1005 x i32]* @head, i64 0, i64 0
	%t50 = bitcast i32* %t49 to i8*
	%t52 = sext i32 %t19 to i64
	%t51 = getelementptr inbounds i8, i8* %t50, i64 %t52
	%t20 = bitcast i8* %t51 to i32*
	%t53 = load i32, i32* %t20, align 4
	store i32 %t53, i32* %l7, align 4
	%t54 = load i32, i32* %l7, align 4
	store i32 %t54, i32* %l8, align 4
	br label %.L5
.L5:
	%t21 = sub nsw i32 0, 1
	%t55 = load i32, i32* %l8, align 4
	%t22 = icmp ne i32 %t55, %t21
	br i1 %t22, label %.L6, label %.L0
.L6:
	%t56 = load i32, i32* %l8, align 4
	%t23 = mul nsw i32 %t56, 1
	%t24 = mul nsw i32 %t23, 4
	%t57 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t58 = bitcast i32* %t57 to i8*
	%t60 = sext i32 %t24 to i64
	%t59 = getelementptr inbounds i8, i8* %t58, i64 %t60
	%t25 = bitcast i8* %t59 to i32*
	%t61 = load i32, i32* %t25, align 4
	store i32 %t61, i32* %l9, align 4
	%t62 = load i32, i32* %l9, align 4
	%t26 = mul nsw i32 %t62, 1
	%t27 = mul nsw i32 %t26, 4
	%t63 = getelementptr inbounds [1005 x i32], [1005 x i32]* @inq, i64 0, i64 0
	%t64 = bitcast i32* %t63 to i8*
	%t66 = sext i32 %t27 to i64
	%t65 = getelementptr inbounds i8, i8* %t64, i64 %t66
	%t28 = bitcast i8* %t65 to i32*
	%t67 = load i32, i32* %t28, align 4
	store i32 %t67, i32* %l10, align 4
	%t68 = load i32, i32* %l8, align 4
	%t29 = mul nsw i32 %t68, 1
	%t30 = mul nsw i32 %t29, 4
	%t69 = getelementptr inbounds [5005 x i32], [5005 x i32]* @to, i64 0, i64 0
	%t70 = bitcast i32* %t69 to i8*
	%t72 = sext i32 %t30 to i64
	%t71 = getelementptr inbounds i8, i8* %t70, i64 %t72
	%t31 = bitcast i8* %t71 to i32*
	%t73 = load i32, i32* %t31, align 4
	store i32 %t73, i32* %l11, align 4
	%t74 = load i32, i32* %l11, align 4
	call void @inqueue(i32 %t74)
	%t75 = load i32, i32* %l8, align 4
	%t32 = mul nsw i32 %t75, 1
	%t33 = mul nsw i32 %t32, 4
	%t76 = getelementptr inbounds [5005 x i32], [5005 x i32]* @next, i64 0, i64 0
	%t77 = bitcast i32* %t76 to i8*
	%t79 = sext i32 %t33 to i64
	%t78 = getelementptr inbounds i8, i8* %t77, i64 %t79
	%t34 = bitcast i8* %t78 to i32*
	%t80 = load i32, i32* %t34, align 4
	store i32 %t80, i32* %l12, align 4
	%t81 = load i32, i32* %l12, align 4
	store i32 %t81, i32* %l8, align 4
	br label %.L5
.L2:
	store i32 0, i32* %l13, align 4
	br label %.L10
.L10:
	%t82 = load i32, i32* %l13, align 4
	%t83 = load i32, i32* @tail, align 4
	%t35 = icmp sle i32 %t82, %t83
	br i1 %t35, label %.L11, label %.L12
.L11:
	%t84 = load i32, i32* %l13, align 4
	%t36 = mul nsw i32 %t84, 1
	%t37 = mul nsw i32 %t36, 4
	%t85 = getelementptr inbounds [1005 x i32], [1005 x i32]* @que, i64 0, i64 0
	%t86 = bitcast i32* %t85 to i8*
	%t88 = sext i32 %t37 to i64
	%t87 = getelementptr inbounds i8, i8* %t86, i64 %t88
	%t38 = bitcast i8* %t87 to i32*
	%t89 = load i32, i32* %t38, align 4
	store i32 %t89, i32* %l14, align 4
	%t90 = load i32, i32* %l14, align 4
	%t39 = mul nsw i32 %t90, 1
	%t40 = mul nsw i32 %t39, 4
	%t91 = getelementptr inbounds [1005 x i32], [1005 x i32]* @inq, i64 0, i64 0
	%t92 = bitcast i32* %t91 to i8*
	%t94 = sext i32 %t40 to i64
	%t93 = getelementptr inbounds i8, i8* %t92, i64 %t94
	%t41 = bitcast i8* %t93 to i32*
	store i32 0, i32* %t41, align 4
	%t95 = load i32, i32* %l13, align 4
	%t42 = add nsw i32 %t95, 1
	store i32 %t42, i32* %l13, align 4
	br label %.L10
.L12:
	%t96 = load i32, i32* %l5, align 4
	store i32 %t96, i32* %l4, align 4
	%t97 = load i32, i32* %l4, align 4
	ret i32 %t97
}
define i32 @main() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%t6 = call i32 @quick_read()
	store i32 %t6, i32* @n, align 4
	%t7 = call i32 @quick_read()
	store i32 %t7, i32* @m, align 4
	call void @init()
	br label %.L0
.L0:
	%t22 = load i32, i32* @m, align 4
	%t8 = icmp ne i32 %t22, 0
	br i1 %t8, label %.L1, label %.L2
.L1:
	%t9 = call i32 (...) @getch()
	store i32 %t9, i32* %l1, align 4
	br label %.L3
.L3:
	%t23 = load i32, i32* %l1, align 4
	%t10 = icmp ne i32 %t23, 81
	%t11 = icmp ne i1 %t10, 0
	br i1 %t11, label %.L6, label %.L5
.L6:
	%t24 = load i32, i32* %l1, align 4
	%t12 = icmp ne i32 %t24, 85
	%t13 = icmp ne i1 %t12, 0
	br i1 %t13, label %.L4, label %.L5
.L4:
	%t14 = call i32 (...) @getch()
	store i32 %t14, i32* %l1, align 4
	br label %.L3
.L5:
	%t25 = load i32, i32* %l1, align 4
	%t15 = icmp eq i32 %t25, 81
	br i1 %t15, label %.L8, label %.L9
.L8:
	%t16 = call i32 @quick_read()
	store i32 %t16, i32* %l2, align 4
	%t17 = call i32 @quick_read()
	store i32 %t17, i32* %l3, align 4
	%t26 = load i32, i32* %l2, align 4
	%t27 = load i32, i32* %l3, align 4
	%t18 = call i32 @same(i32 %t26, i32 %t27)
	call void @putint(i32 %t18)
	call void @putch(i32 10)
	br label %.L10
.L9:
	%t19 = call i32 @quick_read()
	store i32 %t19, i32* %l4, align 4
	%t20 = call i32 @quick_read()
	store i32 %t20, i32* %l5, align 4
	%t28 = load i32, i32* %l4, align 4
	%t29 = load i32, i32* %l5, align 4
	call void @add_edge(i32 %t28, i32 %t29)
	br label %.L10
.L10:
	%t30 = load i32, i32* @m, align 4
	%t21 = sub nsw i32 %t30, 1
	store i32 %t21, i32* @m, align 4
	br label %.L0
.L2:
	store i32 0, i32* %l0, align 4
	%t31 = load i32, i32* %l0, align 4
	ret i32 %t31
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
declare float @getfloat(...);
declare void @putfloat(float);
declare i32 @getfarray(float*);
declare void @putfarray(i32, float*);
